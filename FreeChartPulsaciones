package Control;


import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import javax.swing.JPanel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.time.Month;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RectangleInsets;
import org.jfree.ui.RefineryUtilities;

import Model.Tiempo;

/**
 * Esta clase crea la grafica de las pulsaciones respecto al tiempo en la sesion
 *@author Guillermo Roiguez
 *@author Ethan Recalde
 *@version 2.0
 */
public class FreeChartPulsaciones extends ApplicationFrame {

	private static ArrayList<Tiempo>tiempos;
	private static ArrayList<Integer> pulsaciones;
	
    private static final long serialVersionUID = 1L;

    {
        ChartFactory.setChartTheme(new StandardChartTheme("JFree/Shadow",
                true));
    }

    /**
     * Esta clase crea la "base" de la grafica (titulo, arrays de parametros, dimension de la ventana)
     * @author Guillermo Rodriguez
     * @param title genera el titulo de la grafica
     * @param tiempos array en el que se encuentran los tiempos de la sesion
     * @param altura array en el que se encuentran los valores de las pulsaciones a lo largo de la sesion
     * @param chartPanel crea el panel en el que se pintara la grafica
     * @version 2.0
     */
    public FreeChartPulsaciones(String title,ArrayList<Tiempo>tiempos,ArrayList<Integer> pulsaciones) {
        super(title);
        this.tiempos=tiempos;
        this.pulsaciones=pulsaciones;
        ChartPanel chartPanel = (ChartPanel) createDemoPanel();
        chartPanel.setPreferredSize(new java.awt.Dimension(1000, 1000));
        setContentPane(chartPanel);
        setExtendedState(6); //Pantalla maximizada
    }

    /**
     * Esta clase crea la grafica XY 
     * @author Guillermo Rodriguez
     * @param chart crea la grafica 
     * @param plot genera las lineas de la grafica y los ejes
     * @param r dibuja las lineas
     * @param axis genera el dominio de los ejes
     * @return chart devuelve la grafica
     */
    private static JFreeChart createChart(XYDataset dataset) {

        JFreeChart chart = ChartFactory.createTimeSeriesChart(
            "PULSACIONES",  // titulo
            "Tiempo",             // titulo eje x
            "Pulsaciones",   // titulo eje y
            dataset,            // dataset
            true,               // legend
            true,               // tooltips
            false               // URLs
        );

        chart.setBackgroundPaint(Color.white);

        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);
        plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
        plot.setDomainCrosshairVisible(true);
        plot.setRangeCrosshairVisible(true);

        XYItemRenderer r = plot.getRenderer();
        if (r instanceof XYLineAndShapeRenderer) {
            XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) r;
            renderer.setBaseShapesVisible(true);
            renderer.setBaseShapesFilled(true);
            renderer.setDrawSeriesLineAsPath(true);
        }

        DateAxis axis = (DateAxis) plot.getDomainAxis();
        axis.setDateFormatOverride(new SimpleDateFormat("MMM-yyyy"));

        return chart;

    }

    /**
     * Asiganamos a seria1 los datos para ser representada
     * @author Ethan Recalde
     * @param XYDataset genera el dataset
     * @param serie1 guarda el tiempo y las pulsaciones e imprime la linea con las dos variables
     * @param segundos guarda los segundos
     * @param collection se crea el modelo de la grafica y se le a√±ade la serie
     * @return collection
     */
    private static XYDataset createDataset() {

XYSeries serie1 = new XYSeries("Pulasciones del paciente en la sesion");
    	
    	int segundos = 0;
    	serie1.add(segundos, 0.0);
    	for(int i = 1; i < tiempos.size(); i++){
    		if(tiempos.get(i-1).getSegundos() < tiempos.get(i).getSegundos()){
    			segundos+=tiempos.get(i-1).getSegundos() - tiempos.get(i).getSegundos();
    		}else{
    			segundos+=60-tiempos.get(i-1).getSegundos()+tiempos.get(i).getSegundos();
    		}
    		serie1.add(segundos, pulsaciones.get(i).intValue());
    		
    	}
		
		

		
		XYSeriesCollection collection = new XYSeriesCollection();
		collection.addSeries(serie1);
        

        return collection;

    }

    /**
     * Crea el panel y la grafica completos
     * @author Guillermo Rodriguez
     * @param chart crea la grafica y le mete el dataset
     * @param panel crea el panel y le incluye un zoom y la posibilidad de utilizar la rueda del raton para hacer zoom
     * @return panle devuelve el panel con la grafica
     */
    public static JPanel createDemoPanel() {
        JFreeChart chart = createChart(createDataset());
        ChartPanel panel = new ChartPanel(chart);
        panel.setFillZoomRectangle(true);
        panel.setMouseWheelEnabled(true);
        return panel;
    }
}
