package Control;

import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import javax.swing.JPanel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.time.Month;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RectangleInsets;
import org.jfree.ui.RefineryUtilities;

import Model.Tiempo;

/**
 * An example of a time series chart.  For the most part, default settings are
 * used, except that the renderer is modified to show filled shapes (as well as
 * lines) at each data point.
 */
public class FreeChartVelocidad extends ApplicationFrame {
	
	/**
	 * Parametros de la grafica FreeChartVelocidad
	 * @param tiempos
	 * @param velocidades
	 * */
	private static ArrayList<Tiempo>tiempos;
	private static ArrayList<Float> velocidades;
	
    private static final long serialVersionUID = 1L;

    {
    	ChartFactory.setChartTheme(new StandardChartTheme("JFree/Shadow",
                true));
    }

    /**
     *Constructor 
     * @param title 
     * @param tiempos
     * @param velocidades
     */
    public FreeChartVelocidad(String title, ArrayList<Tiempo> tiempos, ArrayList<Float> velocidades) {
        
    	super(title);
    	this.tiempos = tiempos;
    	this.velocidades = velocidades;
    	
        ChartPanel chartPanel = (ChartPanel) createDemoPanel();
        chartPanel.setPreferredSize(new java.awt.Dimension(1000, 1000));
        setContentPane(chartPanel);
        setExtendedState(6);

    }

    /**
     * Creamos un chart.
     * Le damos las caracteristicas de la grafica aqui
     * @param dataset.
     * @return A chart.
     */
    private static JFreeChart createChart(XYDataset dataset) {

        JFreeChart chart = ChartFactory.createTimeSeriesChart(
            "VELOCIDAD",  			// title
            "Tiempo",             // x-axis label
            "Velocidad (m/s)",   // y-axis label
            dataset,            // data
            true,              // create legend?
            true,             // generate tooltips?
            false            // generate URLs?
        );

        chart.setBackgroundPaint(Color.white);

        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.BLACK);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);
        plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
        plot.setDomainCrosshairVisible(true);
        plot.setRangeCrosshairVisible(true);

        XYItemRenderer r = plot.getRenderer();
        if (r instanceof XYLineAndShapeRenderer) {
            XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) r;
            renderer.setBaseShapesVisible(true);
            renderer.setBaseShapesFilled(true);
            renderer.setDrawSeriesLineAsPath(true);
        }
        
        DateAxis axis = (DateAxis) plot.getDomainAxis();
        axis.setDateFormatOverride(new SimpleDateFormat("HH:mm:ss"));

        return chart;

    }

    /**
     * Metodo creaamos dataset
     * Asiganamos a seria1 los datos para ser representada
     * @return The dataset.
     */
    private static XYDataset createDataset() {
    	//Titulo 
    	XYSeries serie1 = new XYSeries("Velocidad en la sesion");
    	//inicamos los segundos en cero ya que empiza desde ese tiempo
    	int segundos = 0;
    	//asignamos a la seria los segundos(0) y la velocidad(0.0)
    	serie1.add(segundos, 0.0);
    	//Buscamos en el array de tiempos empezando desde la posicion 1
    	for(int i = 1; i < tiempos.size(); i++){
    		//tiempo anterior - tiempo actual = tiempo transcurrido
    		// si ocurre esto significa que todavia no ha pasado de minuto
    		if(tiempos.get(i-1).getSegundos() < tiempos.get(i).getSegundos()){
    			segundos+=tiempos.get(i-1).getSegundos() - tiempos.get(i).getSegundos();
    		}else{
    			//si no se cumple quiere decir que estamos en un minuto nuevo
    			segundos+=60-tiempos.get(i-1).getSegundos()+tiempos.get(i).getSegundos();
    		}
    		//añadimos los datos 
    		serie1.add(segundos, velocidades.get(i).doubleValue());
    		
    	}
		
		

		//Se crea el modelo de la grafica
		XYSeriesCollection collection = new XYSeriesCollection();
		//se le añade la serie1 con los datos de velocidad y tiempo
		collection.addSeries(serie1);
        

        return collection;

    }

    /**
     * Se crea el panel con el zoom y la accion ed mouse
     * @return A panel.
     */
    public static JPanel createDemoPanel() {
        JFreeChart chart = createChart(createDataset());
        ChartPanel panel = new ChartPanel(chart);
        panel.setFillZoomRectangle(true);
        panel.setMouseWheelEnabled(true);
        return panel;
    }





}
